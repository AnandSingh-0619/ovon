# @package _global_

defaults:
  - /habitat_baselines: habitat_baselines_rl_config_base
  - /habitat_baselines/rl/policy/obs_transforms:
    - resize
  - objectnav_stretch_hm3d
  - _self_

habitat:
  environment:
    iterator_options:
      max_scene_repeat_steps: 50000
  task:
    success_reward: 2.5
    slack_reward: -1e-3

  simulator:
    navmesh_settings:
      agent_max_climb: 0.1
      cell_height: 0.05

habitat_baselines:
  verbose: False
  trainer_name: "transformer_ddppo"
  torch_gpu_id: 0
  tensorboard_dir: "tb"
  video_dir: "video_dir"
  video_fps: 30
  test_episode_count: -1
  eval_ckpt_path_dir: "data/new_checkpoints"
  num_environments: 24
  writer_type: 'tb'
  checkpoint_folder: "data/new_checkpoints"
  num_updates: -1
  total_num_steps: 1.0e9
  log_interval: 1
  num_checkpoints: 20
  reset_envs_after_update: True
  call_after_update_env: False
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  eval_keys_to_include_in_name: ['reward', 'force', 'success']
  # rollout_storage_name: MinimalTransformerRolloutStorage
  # updater_name: "MinimalTransformerPPO"
  # distrib_updater_name: "DistributedMinimalTransformerPPO"

  rl:
    # agent:
    #   type: TransformerSingleAgentAccessMgr

    policy:
      name: PointNavResNetTransformerPolicy
      action_distribution_type: categorical
      transformer_config:
        model_name: "llamarl"
        n_layers: 4
        n_heads: 8
        n_hidden: 256
        n_mlp_hidden: 1024
        kv_size: 32
        activation: "gelu_new"
        inter_episodes_attention: False
        reset_position_index: False
        add_sequence_idx_embed: False
        position_embed_type: rope
        gated_residual: False
        context_len: 0
        banded_attention: False
        orphan_steps_attention: True
        add_context_loss: False
        depth_dropout_p: 0.1


    ppo:
      clip_param: 0.2
      ppo_epoch: 2
      num_mini_batch: 6
      grad_accum_mini_batches: 1
      value_loss_coef: 0.5
      entropy_coef: 0.001
      lr: 2e-4
      warmup: False
      warmup_total_iters: 15000
      warmup_start_factor: 1e-3
      lr_scheduler: ""
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 500
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: True

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False
      training_precision: "float32"

      update_stale_kv: True
      update_stale_values: False
      full_updates_per_rollout: 1
      updates_per_rollout: 1

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: GLOO
      # Visual encoder backbone
      pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: False
      # Whether the visual encoder backbone will be trained.
      train_encoder: False
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: vc1
      rnn_type: transformer
